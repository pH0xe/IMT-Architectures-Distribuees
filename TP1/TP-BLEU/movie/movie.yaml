---
openapi: 3.0.0
info:
  title: Movie API
  description: This is the API of the Movie service
  contact:
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/ph0xe2/MovieAPI/1.0.0
- url: https://virtserver.swaggerhub.com/UE-archi-distribuees/Movie/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
      - developers
      summary: home page of the service
      description: |
        Nothing to do
      operationId: home
      responses:
        "200":
          description: welcome message and entry point for API
          content:
            text/html:
              schema:
                type: string
                example: <h1>Test</h1>
  /movies/{movieid}:
    get:
      tags:
      - developers
      summary: get the movie by its id
      description: |
        By passing in the appropriate options, you can get info of a Movie
      operationId: get_movie_byid
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          maximum: 1
          minimum: 1
          type: string
      responses:
        "200":
          description: Movie description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItemDetail'
        "400":
          description: bad input parameter
    delete:
      tags:
      - admins
      summary: delete a movie item
      description: Adds a movie to the system
      operationId: del_movie
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          maximum: 1
          minimum: 1
          type: string
      responses:
        "200":
          description: item deleted
        "400":
          description: ID not found
    put:
      tags:
        - admins
      summary: Update any fields of a movie
      description: Update any fields of a movie designated by movieid
      operationId: update_movie
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          maximum: 1
          minimum: 1
          type: string
      - name: title
        in: query
        description: new title for the movie.
        required: false
        style: form
        explode: false
        schema:
          maximum: 1
          minimum: 1
          type: string
      - name: director
        in: query
        description: new director for the movie
        required: false
        style: form
        explode: false
        schema:
          maximum: 1
          minimum: 1
          type: string
      - name: rate
        in: query
        description: New rate for the movie.
        required: false
        style: form
        explode: false
        schema:
          maximum: 1
          minimum: 1
          type: string
      responses:
        "200":
          description: movie updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItemAddResponse'
        "400":
          description: ID not found
  /movies:
    get:
      tags:
        - developers
      summary: get the top 250 movies
      description: |
        Nothing to do
      operationId: get_json
      responses:
        "200":
          description: JSON Movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movies'
    post:
      tags:
      - admins
      summary: add a movie item
      description: Adds a movie to the system
      operationId: create_movie
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieItem'
      responses:
        "200":
          description: Movie created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItemAddResponse'
        "409":
          description: an existing item already exists
  /moviesbytitle:
    get:
      tags:
      - developers
      summary: get the movie by its title
      description: |
        By passing in the appropriate options, you can get Movie info
      operationId: get_movie_bytitle
      parameters:
      - name: title
        in: query
        description: pass a title
        required: true
        style: form
        explode: true
        schema:
          maximum: 1
          minimum: 1
          type: string
      responses:
        "200":
          description: Movie item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItemDetail'
        "400":
          description: bad input parameter
  /movies/{movieid}/{rate}:
    put:
      tags:
      - admins
      summary: update a movie rate
      description: update the rating of a movie
      operationId: update_movie_rating
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          maximum: 1
          minimum: 1
          type: string
      - name: rate
        in: path
        description: Movie rating.
        required: true
        style: simple
        explode: false
        schema:
          maximum: 10
          minimum: 0
          type: integer
      responses:
        "200":
          description: rate updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItemAddResponse'
        "400":
          description: movie ID not found
components:
  schemas:
    MovieItem:
      required:
      - id
      - director
      - rating
      - title
      type: object
      properties:
        id:
          type: string
          example: a8034f44-aee4-44cf-b32c-74cf452aaaa
        title:
          type: string
          example: The Martian
        rating:
          type: string
          example: "7"
        director:
          type: string
          example: Paul McGuigan
    Movies:
      type: array
      items:
        $ref: '#/components/schemas/MovieItem'
    MovieItemDetail:
      required:
      - id
      - director
      - rating
      - title
      type: object
      properties:
        id:
          type: string
          example: a8034f44-aee4-44cf-b32c-74cf452aaaa
        title:
          type: string
          example: The Martian
        rating:
          type: string
          example: "7"
        director:
          type: string
          example: Paul McGuigan
        deleteLink:
          type: string
          example: "[DELETE] /movies/{movieid}"
        updateRateLink:
          type: string
          example: "[PUT] /movies/{movieid}/{rate}"
        updateLink:
          type: string
          example: "[PUT] /movies/{movieid}?title=***&director=***&rating=***"
    MovieItemAddResponse:
        required:
        - id
        - director
        - rating
        - title
        - filmDetail
        type: object
        properties:
          id:
            type: string
            example: a8034f44-aee4-44cf-b32c-74cf452aaaa
          title:
            type: string
            example: The Martian
          rating:
            type: string
            example: "7"
          director:
            type: string
            example: Paul McGuigan
          filmDetail:
            type: string
            example: "[GET] /movies/{movieid}"